#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5448
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace curriculumSchedule
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "curriculum")]
    public partial class Curriculum : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertKe(Ke instance);
        partial void UpdateKe(Ke instance);
        partial void DeleteKe(Ke instance);
        #endregion

        public Curriculum(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        //public Curriculum(System.Data.IDbConnection connection) : 
        //        base(connection, mappingSource)
        //{
        //    OnCreated();
        //}

        public Curriculum(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        //public Curriculum(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
        //        base(connection, mappingSource)
        //{
        //    OnCreated();
        //}

        public System.Data.Linq.Table<Ke> Ke
        {
            get
            {
                return this.GetTable<Ke>();
            }
        }
    }

    [Table(Name = "ke")]
    public partial class Ke : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Name;

        private string _Room;

        private string _Teacher;

        private string _Tbname;

        private string _Comment;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnWeekdayChanging(int value);
        partial void OnWeekdayChanged();
        partial void OnIndexChanging(int value);
        partial void OnIndexChanged();
        partial void OnTeacherChanging(string value);
        partial void OnTeacherChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        #endregion

        public Ke()
        {
            OnCreated();
        }

        //[Column(Name = "id", Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true, IsDbGenerated = true, AutoSync = AutoSync.OnInsert)]
        [Column(IsPrimaryKey = true, IsDbGenerated = true, DbType = "INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [Column(Name = "name", Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }


        [Column(Name = "tbname", Storage = "_Tbname", DbType = "NVarChar(5) NOT NULL", CanBeNull = false)]
        public string Tbname
        {
            get
            {
                return this._Tbname;
            }
            set
            {
                if ((this._Tbname != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Tbname = value;
                    this.SendPropertyChanged("Tbname");
                    this.OnNameChanged();
                }
            }
        }


        [Column(Name = "teacher", Storage = "_Teacher", DbType = "NVarChar(30)")]
        public string Teacher
        {
            get
            {
                return this._Teacher;
            }
            set
            {
                if ((this._Teacher != value))
                {
                    this.OnTeacherChanging(value);
                    this.SendPropertyChanging();
                    this._Teacher = value;
                    this.SendPropertyChanged("Teacher");
                    this.OnTeacherChanged();
                }
            }
        }


        [Column(Name = "room", Storage = "_Room", DbType = "NVarChar(30)")]
        public string Room
        {
            get
            {
                return this._Room;
            }
            set
            {
                if ((this._Room != value))
                {
                    this.OnTeacherChanging(value);
                    this.SendPropertyChanging();
                    this._Room = value;
                    this.SendPropertyChanged("Room");
                    this.OnTeacherChanged();
                }
            }
        }


        [Column(Name = "comment", Storage = "_Comment", DbType = "NVarChar(60)")]
        public string Comment
        {
            get
            {
                return this._Comment;
            }
            set
            {
                if ((this._Comment != value))
                {
                    this.OnCommentChanging(value);
                    this.SendPropertyChanging();
                    this._Comment = value;
                    this.SendPropertyChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
#pragma warning restore 1591

}